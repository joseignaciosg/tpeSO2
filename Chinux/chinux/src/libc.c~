#include "../include/kc.h"
#include "../include/kernel.h"



/***************************************************************
*k_clear_screen
*
* Borra la pantalla en modo texto color.
****************************************************************/


/* __write
*
* Recibe como parametros:
* - File Descriptor
* - Buffer del source
* - Cantidad
*
**//*
size_t __write(int fd, const void* buffer, size_t count)
{
  _asm_("mov buffer,%ECX  \n\t"
	"mov count,%EDX ");
  int_80(WRITE); 
}*/
/* __read
*
* Recibe como parametros:
* - File Descriptor
* - Buffer a donde escribir
* - Cantidad
*
**/


char lowercase[256] = {0x1E:'a'};
 char uppercase[256] = {0x1E:'A'};
 
 unsigned shift_state = 0;
 
 void KeyboardIsr()
 {
    byte new_scan_code = inportb(0x60);
 
    switch(new_scan_code) {
        case 0x2a: 
            shift_state = 1; 
            break;
 
        case 0xaa: 
            shift_state = 0;
            break;
 
        default:
           if (new_scan_code & 0x80) {
              /* Ignore the break code */
           } else {
              new_char =(shift_state ? uppercase:lowercase)[new_scan_code];
              /* Do something with new_char. */
           }
           break;
     }
 
     outportb(0x20,0x20);
 }




void k_clear_screen() 
{
	char *vidmem = (char *) 0xb8000;
	unsigned int i=0;
	while(i < (80*25*2))
	{
		vidmem[i]=' ';//7
		i++;
		vidmem[i]=WHITE_TXT; //0x68
		i++;
	};
}

//imprime un caracter en pantalla
 void putc(char c){
     char *vidmem = (char *) 0xb8000;
     unsigned int i =0;
     vidmem[i] = c;
 }

//imprime un string en pantalla
 void print(char s[]){
     char *vidmem = (char *) 0xb8000;
     unsigned int i =0;
     unsigned int j =0;
     while ( s[j] != -1 )
     {
       vidmem[i] = s[j]; 
       i++;
       vidmem[i]=WHITE_TXT; //0x68
       i++;
       j++;
     }
}

/***************************************************************
*setup_IDT_entry
* Inicializa un descriptor de la IDT
*
*Recibe: Puntero a elemento de la IDT
*	 Selector a cargar en el descriptor de interrupcion
*	 Puntero a rutina de atencion de interrupcion	
*	 Derechos de acceso del segmento
*	 Cero
****************************************************************/

void setup_IDT_entry (DESCR_INT *item, byte selector, dword offset, byte access,
			 byte cero) {
  item->selector = selector;
  item->offset_l = offset & 0xFFFF;
  item->offset_h = offset >> 16;
  item->access = access;
  item->cero = cero;
}
